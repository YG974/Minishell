fonctions autorisees :
malloc, free, write, open, read, close, fork, wait,
waitpid, wait3, wait4, signal, kill, exit, getcwd,
chdir, stat, lstat, fstat, execve, dup, dup2, pipe,
opendir, readdir, closedir, strerror, errno

Afficher un prompt en l’attente d’une nouvelle commande
• Chercher et lancer le bon executable (basé sur une variable d’environnement PATH ou en utilisant un path absolu), comme dans bash
• Vous devez implémenter les builtins suivants :
◦ echo et l’option ’-n’
◦ cd uniquement avec un chemin absolu ou relatif ◦ pwd sans aucune option
◦ export sans aucune option
◦ unset sans aucune option
◦ env sans aucune option ni argument
◦ exit sans aucune option
• ; dans la ligne de commande doit séparer les commandes
• ’ et " doivent marcher comme dans bash, à l’exception du multiligne.
• Les redirections <, > et “>>” doivent marcher comme dans bash, à l’exception des aggrégations de fd
• Pipes | doivent marcher comme dans bash
• Les variables d’environnement ($ suivi de caractères) doivent marcher comme dans bash.
• $? doit marcher comme dans bash
• ctrl-C, ctrl-D et ctrl-\ doivent afficher le même résultat que dans bash.
